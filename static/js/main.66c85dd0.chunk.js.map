{"version":3,"sources":["apis/api.js","views/searchBox/SearchBox.js","views/pharmacyList/PharmacyList.js","views/map/Map.js","views/home/App.js","serviceWorker.js","index.js"],"names":["request","axios","create","baseURL","getParmacyList","data","get","useStyles","makeStyles","theme","root","width","boxShadow","borderRadius","content","padding","backgroundColor","title","fontSize","formControl","margin","spacing","minWidth","selectEmpty","marginTop","SearhBox","props","classes","useState","allList","setAllList","areaList","setAreaList","area","setArea","cityList","setCityList","city","setCity","currentStores","setCurrentStores","useEffect","then","response","res","features","forEach","store","geometry","position","lat","coordinates","lng","push","properties","county","filter","index","indexOf","getCurrentStore","intervalId","setInterval","clearInterval","town","length","currentPharmacyList","getStoreList","value","Card","className","CardContent","Typography","align","gutterBottom","variant","component","FormControl","InputLabel","shrink","id","Select","labelId","onChange","event","target","displayEmpty","map","item","idx","MenuItem","key","getFilterCityStores","height","overflowY","marginBottom","subRoot","maxWidth","lists","display","alignItems","wordSpace","icon","marginRight","operateTime","subFooter","paddingLeft","settingIcon","bottom","right","cursor","modal","paper","palette","background","border","shadows","table","PharmacyList","open","setOpen","currentStore","setCurrentStore","modelPos","setModelPos","tableRow","setTableRow","storeList","subRootContent","style","color","textAlign","updated","name","address","phone","CardActions","onClick","e","row","mon","tus","web","thur","fri","sat","sun","arr","timeArr","available","split","time","i","y","window","screen","clientY","x","clientX","showDetail","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","top","left","Fade","in","TableContainer","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","scope","GoogleApiWrapper","apiKey","centerPos","setCenterPos","showingInfoWindow","activeMarker","setActiveMarker","onMarkerClick","marker","markerData","getMarkerData","google","zoom","initialCenter","center","visible","resetSearchData","fontWeight","flexGrow","text","secondary","Boolean","location","hostname","match","ReactDOM","render","setStorList","searchStoreList","setSearchStoreList","getStore","storeData","Grid","container","val","getSearchStore","xs","Map","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66c85dd0.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst request = axios.create({\r\n    baseURL: 'https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json'\r\n});\r\n\r\n\r\nexport const getParmacyList = data => request.get('', data);\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getParmacyList } from '../../apis/api'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        width: '100%',\r\n        boxShadow: 'none',\r\n        borderRadius: '0px'\r\n    },\r\n    content: {\r\n        padding: '0px',\r\n        backgroundColor: 'rgb(224, 226, 224)'\r\n    },\r\n    title: {\r\n        fontSize: 16,\r\n        backgroundColor: 'rgb(172, 189, 188)',\r\n        padding: '10px'\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1.5),\r\n        minWidth: 200\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2)\r\n    }\r\n}))\r\n\r\nexport default function SearhBox (props) {\r\n    const classes = useStyles()\r\n    const [ allList, setAllList ] = useState([])\r\n    const [ areaList, setAreaList ] = useState([])\r\n    const [ area, setArea ] = useState('')\r\n    const [ cityList, setCityList] = useState([])\r\n    const [ city, setCity] = useState(\"\")\r\n    const defaultDelay = 50000\r\n    const [currentStores, setCurrentStores] = useState([])\r\n\r\n    // const [count, setCount] = useState(0)\r\n    // const [delay, setDelay] = useState(1000)\r\n    //\r\n    // useEffect(() => {\r\n    //     const timer = setInterval(() => {\r\n    //         setCount(c => c + 1)\r\n    //     }, delay)\r\n    //     return () => clearInterval(timer)\r\n    // }, [delay])\r\n    //\r\n    // const handelDelayChange = e => setDelay(+e.target.value)\r\n\r\n\r\n    useEffect(() => {\r\n        getParmacyList().then(response => {\r\n            const { data: res } = response\r\n            let areaList = []\r\n            // let cityList = []\r\n            setAllList(res.features)\r\n            res.features.forEach(store => {\r\n                if(store.geometry){\r\n                    store.geometry.position = { lat: store.geometry.coordinates[1], lng: store.geometry.coordinates[0]}\r\n                }\r\n                areaList.push(store.properties.county)\r\n                // cityList.push(store.properties.town)\r\n            })\r\n            areaList = areaList.filter(\r\n                (area, index) => areaList.indexOf(area) === index\r\n            )\r\n            // cityList = cityList.filter(\r\n            //     (area, index) => areaList.indexOf(area) === index\r\n            // )\r\n            setAreaList(areaList)\r\n            // setCityList(cityList)\r\n\r\n            setArea(area=>{\r\n                area = area || areaList[0]\r\n                getCurrentStore(res.features, area)\r\n                return area\r\n            })\r\n\r\n\r\n        })\r\n        const intervalId = setInterval(() => {\r\n            getParmacyList().then(response => {\r\n                const { data: res } = response\r\n                let areaList = []\r\n                setAllList(res.features)\r\n                res.features.forEach(store => {\r\n                    if(store.geometry){\r\n                        store.geometry.position = { lat: store.geometry.coordinates[1], lng: store.geometry.coordinates[0]}\r\n                    }\r\n                    areaList.push(store.properties.county)\r\n                })\r\n                areaList = areaList.filter(\r\n                    (area, index) => areaList.indexOf(area) === index\r\n                )\r\n                setAreaList(areaList)\r\n                setArea(area=>{\r\n                    area = area || areaList[0]\r\n                    getCurrentStore(res.features, area)\r\n                    return area\r\n                })\r\n\r\n            })\r\n        }, defaultDelay)\r\n        return () => clearInterval(intervalId);\r\n    }, [])\r\n\r\n\r\n    useEffect(()=>{\r\n        let cityList = []\r\n        currentStores.forEach(store => {\r\n            cityList.push(store.properties.town)\r\n        })\r\n        cityList = cityList.filter(\r\n            (city, index) => cityList.indexOf(city) === index\r\n        )\r\n        setCityList(cityList)\r\n        if(cityList.length<1)return\r\n        setCity(cityList[0])\r\n        let currentPharmacyList = allList.filter(\r\n            area => area.properties.town === cityList[0])\r\n        props.getStoreList(currentPharmacyList)\r\n    },[area])\r\n\r\n    const getCurrentStore = (allList, value) => {\r\n        let currentPharmacyList = allList.filter(\r\n            area => area.properties.county === value)\r\n        setCurrentStores(currentPharmacyList)\r\n        setArea(value)\r\n    }\r\n\r\n    const getFilterCityStores = (allList, value) => {\r\n        let currentPharmacyList = allList.filter(\r\n            city => city.properties.town === value)\r\n        props.getStoreList(currentPharmacyList)\r\n        // setArea(value)\r\n    }\r\n\r\n    const handleAreaChange = event => {\r\n        let value = event.target.value\r\n        setArea(value)\r\n        getCurrentStore(allList, value)\r\n    }\r\n\r\n    const handleCityChange = event => {\r\n        let value = event.target.value\r\n        setCity(value)\r\n        getFilterCityStores(allList,value)\r\n    }\r\n\r\n    return (\r\n        <Card className={ classes.root }>\r\n            <CardContent className={ classes.content }>\r\n                <Typography className={ classes.title } align=\"center\" gutterBottom> 健保特約機構口罩剩餘數量明細清單 資料來源:衛服部 </Typography>\r\n                <Typography variant=\"h5\" component=\"h2\" align=\"center\">\r\n                    <FormControl className={ classes.formControl }>\r\n                        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">縣市</InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-placeholder-label-label\"\r\n                            id=\"demo-simple-select-placeholder-label\"\r\n                            value={ area }\r\n                            onChange={ handleAreaChange }\r\n                            displayEmpty\r\n                            className={ classes.selectEmpty }\r\n                        >\r\n                            {\r\n                                areaList.map((item, idx) =>\r\n                                    <MenuItem key={ idx } value={ item }>{ item }</MenuItem>)\r\n                            }\r\n                        </Select> </FormControl>\r\n                </Typography>\r\n               <Typography variant=\"h5\" component=\"h2\" align=\"center\">\r\n                    <FormControl className={ classes.formControl }>\r\n                        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">區域</InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-placeholder-label-label\"\r\n                            id=\"demo-simple-select-placeholder-label\"\r\n                            value={ city }\r\n                            onChange={ handleCityChange }\r\n                            displayEmpty\r\n                            className={ classes.selectEmpty }\r\n                        >\r\n                            {\r\n                                cityList.map((item, idx) =>\r\n                                    <MenuItem key={ idx } value={ item }>{ item }</MenuItem>)\r\n                            }\r\n                        </Select>\r\n                    </FormControl>\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React,{ useState, useEffect } from 'react'\r\nimport { getParmacyList } from '../../apis/api'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport ShareIcon from '@material-ui/icons/Share'\r\nimport HomeIcon from '@material-ui/icons/Home'\r\nimport PhoneIcon from '@material-ui/icons/Phone'\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport StarRateIcon from '@material-ui/icons/StarRate';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        width: '100%',\r\n        boxShadow: 'none',\r\n        borderRadius: '0px',\r\n        position: 'relative',\r\n    },\r\n    content: {\r\n        padding: '0px',\r\n        backgroundColor: 'rgb(238, 238, 236)',\r\n        height: 'calc(100vh - 240px)',\r\n        overflowY: 'scroll'\r\n    },\r\n    title: {\r\n        fontSize: 12,\r\n        padding: '10px',\r\n        marginBottom: 0,\r\n        backgroundColor: 'rgb(238, 238, 236)'\r\n    },\r\n    subRoot: {\r\n        position: 'relative',\r\n        margin: '15px auto',\r\n        backgroundColor: 'rgb(224, 226, 224)',\r\n        maxWidth: 350\r\n    },\r\n    lists: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        wordSpace: 'wrap'\r\n    },\r\n    icon: {\r\n        marginRight: 5\r\n    },\r\n    operateTime: {\r\n        fontSize: 12\r\n    },\r\n    subFooter: {\r\n        paddingLeft: 16,\r\n        backgroundColor: '#d3dedc'\r\n    },\r\n    settingIcon: {\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        right: 16,\r\n        height: 32,\r\n        cursor: \"pointer\"\r\n    },\r\n    modal: {\r\n        position: 'absolute',\r\n        maxWidth: 520,\r\n        height: 260,\r\n        overflowY: 'scroll'\r\n        // display: 'flex',\r\n        // alignItems: 'center',\r\n        // justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    table: {\r\n        minWidth: 200,\r\n    },\r\n}))\r\n\r\nexport default function PharmacyList (props) {\r\n    const classes = useStyles()\r\n    const [open, setOpen] = useState(false);\r\n    const [currentStore, setCurrentStore] = useState({})\r\n    const [modelPos, setModelPos] = useState({})\r\n    const [tableRow, setTableRow] = useState([])\r\n\r\n    const createData = (name,mon, tus, web, thur, fri, sat, sun) =>{\r\n        return { name,mon, tus, web, thur, fri, sat, sun };\r\n    }\r\n\r\n    const showDetail = (e,store)=>{\r\n        setTableRow((row)=>{\r\n            let arr = []\r\n            let availTime = store.available.split('、')\r\n            let timeArr = availTime.map(time=>{\r\n                if(time.indexOf('看')>-1){\r\n                    return 'O'\r\n                }\r\n                return 'X'\r\n            })\r\n\r\n            for(let i = 0; i<timeArr.length; i = i+7){\r\n                let time = '上午'\r\n                if(i>=14){\r\n                    time = '晚上'\r\n                }else if(i>=7){\r\n                    time = '中午'\r\n                }\r\n                arr.push(createData(time,timeArr[i],timeArr[i+1],timeArr[i+2],timeArr[i+3],timeArr[i+4],timeArr[i+5],timeArr[i+6]))\r\n            }\r\n            // console.log(row)\r\n            return arr\r\n        })\r\n\r\n        let y = window.screen.height<e.clientY+390?\r\n            'calc(100vh - 270px)':e.clientY\r\n        setOpen(true);\r\n        setCurrentStore(store)\r\n        setModelPos({x:e.clientX,y:y})\r\n    }\r\n\r\n    const hideDetail = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n        <Card className={ classes.root }>\r\n            {/*<Typography className={ classes.title } gutterBottom> 更新時間 2020/2/6 16:50 </Typography>*/}\r\n            <CardContent className={ classes.content }>\r\n                {\r\n                    props.storeList.map(({properties},idx)=>{\r\n                     return(\r\n                         <Card key={idx} className={ classes.subRoot }>\r\n                             <CardContent className={ classes.subRootContent }>\r\n                                 <Typography style={{fontSize:12, color: 'grey',textAlign: 'right'}} color=\"textSecondary\" variant=\"body1\" gutterBottom>\r\n                                     更新時間 : {properties.updated}\r\n                                 </Typography>\r\n                                 <Typography variant=\"h5\" component=\"h2\">\r\n                                     {properties.name} &nbsp;\r\n                                 </Typography>\r\n                                 <Typography className={ classes.operateTime } color=\"textSecondary\" variant=\"body1\" gutterBottom>\r\n                                     營業時間 : 請點擊\r\n                                     <ShareIcon style={{fontSize:12}}/>查看詳細\r\n                                 </Typography>\r\n                                 <Typography className={ classes.lists } variant=\"body2\">\r\n                                     <HomeIcon className={ classes.icon } /> {properties.address}\r\n                                 </Typography>\r\n                                 <Typography className={ classes.lists } variant=\"body2\">\r\n                                     <PhoneIcon className={ classes.icon } /> {properties.phone}\r\n                                 </Typography> </CardContent>\r\n                             <CardActions\r\n                                 className={ classes.subFooter }\r\n                                 style={\r\n                                     properties['mask_adult'] + properties['mask_child']<100?\r\n                                         properties['mask_adult'] + properties['mask_child'] === 0?\r\n                                             {\r\n                                                 backgroundColor:'rgb(202, 201, 199)'\r\n                                             }\r\n                                             :\r\n                                         {\r\n                                             backgroundColor:'rgb(221, 125, 90)'\r\n                                         }:{}\r\n                                 }>\r\n                                 <Typography\r\n                                     className={ classes.lists }\r\n                                     variant=\"body2\"\r\n                                 >\r\n                                     {\r\n                                         properties['mask_adult'] + properties['mask_child'] === 0\r\n                                             ?<>已售完</>\r\n                                             :<>剩餘 {properties['mask_adult'] + properties['mask_child']}，成人{properties['mask_adult']} / 兒童{properties['mask_child']}</>\r\n                                     }\r\n\r\n                                     <ShareIcon className={ classes.settingIcon } onClick={(e)=>showDetail(e,properties)} />\r\n                                 </Typography>\r\n                             </CardActions>\r\n                         </Card>\r\n                     )\r\n                    })\r\n                }\r\n            </CardContent>\r\n        </Card>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={hideDetail}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n                style={{\r\n                    top: modelPos.y,\r\n                    left: modelPos.x + 20\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <div className={classes.paper}>\r\n                        <h2 id=\"transition-modal-title\">\r\n                            {currentStore.name} &nbsp;\r\n                            <span style={{fontSize:12, color: 'grey'}}>(更新時間 : {currentStore.updated})</span>\r\n                        </h2>\r\n                        <p id=\"transition-modal-description\">看診時間 : </p>\r\n                        <TableContainer component={Paper}>\r\n                            <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>營業時間</TableCell>\r\n                                        <TableCell align=\"right\">一</TableCell>\r\n                                        <TableCell align=\"right\">二</TableCell>\r\n                                        <TableCell align=\"right\">三</TableCell>\r\n                                        <TableCell align=\"right\">四</TableCell>\r\n                                        <TableCell align=\"right\">五</TableCell>\r\n                                        <TableCell align=\"right\">六</TableCell>\r\n                                        <TableCell align=\"right\">日</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {tableRow.map(row => (\r\n                                        <TableRow key={row.name}>\r\n                                            <TableCell component=\"th\" scope=\"row\">\r\n                                                {row.name}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"right\">{row.mon}</TableCell>\r\n                                            <TableCell align=\"right\">{row.tus}</TableCell>\r\n                                            <TableCell align=\"right\">{row.web}</TableCell>\r\n                                            <TableCell align=\"right\">{row.thur}</TableCell>\r\n                                            <TableCell align=\"right\">{row.fri}</TableCell>\r\n                                            <TableCell align=\"right\">{row.sat}</TableCell>\r\n                                            <TableCell align=\"right\">{row.sun}</TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        <p>\r\n                            <StarRateIcon style={{color:\"gold\",fontSize:12}}/>\r\n                            <span> 憑健保卡向健保特約藥局購買</span>\r\n                        </p>\r\n                        <p>\r\n                            <StarRateIcon style={{color:\"gold\",fontSize:12}}/>\r\n                            <span> 依身分證末一碼，購買日期規定如下：</span>\r\n                        </p>\r\n                        <p>奇數 : 星期一、三、五、日</p>\r\n                        <p>偶數 : 星期二、四、六、日</p>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n            </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n","import React,{useState,useEffect} from 'react';\r\nimport { Map, GoogleApiWrapper, Marker ,InfoWindow  } from 'google-maps-react'\r\n\r\nfunction MapContainer (props) {\r\n    const [centerPos, setCenterPos] = useState({})\r\n    const [showingInfoWindow, setShowingInfoWindow] = useState(true)\r\n    const [activeMarker, setActiveMarker] = useState({})\r\n\r\n\r\n    const mapStyles = {\r\n        width: 'calc(100% - 400px)',\r\n        height: '100%',\r\n    };\r\n\r\n    const infoTitle ={\r\n        fontWeight: 'bolder'\r\n    }\r\n\r\n    const onMarkerClick = (item, marker, e)=>{\r\n        setActiveMarker(marker)\r\n        setCenterPos(item.position)\r\n        let markerData = props.storeList.filter(store=>{\r\n            return store.properties.name === item.name\r\n        })\r\n        props.getMarkerData(markerData)\r\n    }\r\n\r\n    const onInfoClose = ()=>{\r\n        props.resetSearchData('reset')\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setCenterPos(props.storeList[0]&&props.storeList[0].geometry&&props.storeList[0].geometry.position)\r\n    },[props.storeList])\r\n\r\n    return (\r\n        <Map\r\n            google={ props.google }\r\n            zoom={ 18 }\r\n            style={ mapStyles }\r\n            initialCenter={ centerPos }\r\n            center={centerPos}\r\n        >\r\n            {\r\n                props.storeList.map(({properties,geometry},idx)=>{\r\n                    return(\r\n                        <Marker\r\n                            key={idx}\r\n                            id={idx}\r\n                            position={{ lat: geometry.coordinates[1], lng: geometry.coordinates[0]}}\r\n                            onClick={onMarkerClick}\r\n                            name={properties.name}\r\n                            // icon={{\r\n                            //     anchor: new props.google.maps.Point(32,32),\r\n                            //     scaledSize: new props.google.maps.Size(64,64)\r\n                            // }}\r\n                        >\r\n                        </Marker>\r\n                    )\r\n                })\r\n            }\r\n            <InfoWindow\r\n                visible={showingInfoWindow}\r\n                marker={activeMarker}\r\n                onClose = {onInfoClose}\r\n            >\r\n                {\r\n                    activeMarker?\r\n                        <div>\r\n                            <span style={infoTitle}>{activeMarker.name}</span>\r\n                        </div>\r\n\r\n                        :\"\"\r\n                }\r\n            </InfoWindow>\r\n        </Map>\r\n    )\r\n\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: 'AIzaSyCM8oi4NY9IzC3ntycqsjplsDA75k196i8'\r\n})(MapContainer);\r\n","import React ,{useState, useEffect}from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport SearhBox from '../searchBox/SearchBox'\nimport PharmacyList from '../pharmacyList/PharmacyList'\nimport Map from '../map/Map'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n\n\nexport default function App() {\n  const classes = useStyles();\n  const [storeList, setStorList] = useState([])\n  const [searchStoreList, setSearchStoreList] = useState([])\n  const getSearchStore = (storeList)=>{\n    setStorList(storeList)\n    setSearchStoreList(storeList)\n  }\n  const getStore = (storeData)=>{\n    if(typeof storeData ===\"string\"){\n      setStorList(searchStoreList)\n      return\n    }\n    setStorList(storeData)\n  }\n  return (\n      <div className={classes.root}>\n        <Grid container style={{position:\"absolute\"}}>\n          <Grid item>\n            <SearhBox\n                getStoreList = {(val)=>getSearchStore(val)}\n            ></SearhBox>\n            <PharmacyList storeList = {storeList}/>\n          </Grid>\n          <Grid item xs>\n            <Map\n                storeList = {storeList}\n                getMarkerData = {(val)=>getStore(val)}\n                resetSearchData = {(val)=>getStore(val)}\n            ></Map>\n          </Grid>\n        </Grid>\n      </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/home/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}